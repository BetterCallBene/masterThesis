    %% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/laetus/Desktop/Thesis/Src/data/abfluss_16005701.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/12/12 11:07:31

%% Initialize variables.
filename = '/home/laetus/Desktop/Thesis/Src/data/abfluss_16005701.csv';
delimiter = ';';
startRow = 10;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.
rawData = dataArray{2};
for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\.]*)+[\,]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\.]*)*[\,]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers=='.');
            thousandsRegExp = '^\d+?(\.\d{3})*\,{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, '.', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = strrep(numbers, '.', '');
            numbers = strrep(numbers, ',', '.');
            numbers = textscan(numbers, '%f');
            numericData(row, 2) = numbers{1};
            raw{row, 2} = numbers{1};
        end
    catch me
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{1} = datetime(dataArray{1}, 'Format', 'yyyy-MM-dd HH:mm', 'InputFormat', 'yyyy-MM-dd HH:mm');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
        dates{1} = datetime(dataArray{1}, 'Format', 'yyyy-MM-dd HH:mm', 'InputFormat', 'yyyy-MM-dd HH:mm');
    catch
        dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{1});
anyInvalidDates = isnan(dates{1}.Hour) - anyBlankDates;
dates = dates(:,1);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, 2);
rawCellColumns = raw(:, 3);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
flow_munich = table;
flow_munich.timestamp = dates{:, 1};
flow_munich.flow_m3ps = cell2mat(rawNumericColumns(:, 1));
flow_munich.status = rawCellColumns(:, 1);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% abfluss16005701.Koordinaten=datenum(abfluss16005701.Koordinaten);

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawCellColumns R;

%% Extract some interesting parts
%Worst case flood (August/September 2005)
time_intervall = (datetime(2005, 08, 21) <= flow_munich.timestamp) & (datetime(2005,9,3) >= flow_munich.timestamp);
wc_flood.timestamp = flow_munich.timestamp(time_intervall);
wc_flood.flow_m3ps = flow_munich.flow_m3ps(time_intervall);
wc_flood.status = flow_munich.status(time_intervall);
figure(1)
hold off
plot(wc_flood.timestamp, wc_flood.flow_m3ps);


%Worst case flood (August 23rd 2005 12:30) 
time_intervall = (datetime(2005, 8, 23,12,30,0) <= flow_munich.timestamp) & (datetime(2005,8,25,12,30,0) >= flow_munich.timestamp);
wc_1d.timestamp = flow_munich.timestamp(time_intervall);
wc_1d.flow_m3ps = flow_munich.flow_m3ps(time_intervall);
wc_1d.status = flow_munich.status(time_intervall);
figure(2)
hold off%% Generate forecasts
plot(wc_1d.timestamp, wc_1d.flow_m3ps);


%Some usual example 1d (July 2th 2015)
time_intervall = (datetime(2015,7,2) <= flow_munich.timestamp) & (datetime(2015,7,4) >= flow_munich.timestamp);

usual.timestamp = flow_munich.timestamp(time_intervall);
usual.flow_m3ps = flow_munich.flow_m3ps(time_intervall);
usual.status = flow_munich.status(time_intervall);
figure(3)
hold off
plot(usual.timestamp, usual.flow_m3ps);


%Some other usual example 1d ( June 8th 2015)
time_intervall = (datetime(2015,6,8) <= flow_munich.timestamp) & (datetime(2015,6,10) >= flow_munich.timestamp);
usual2.timestamp = flow_munich.timestamp(time_intervall);
usual2.flow_m3ps = flow_munich.flow_m3ps(time_intervall);
usual2.status = flow_munich.status(time_intervall);
figure(4);
hold off
plot(usual2.timestamp, usual2.flow_m3ps);

save('data/4flows.mat', 'wc_1d', 'wc_flood', 'usual', 'usual2');